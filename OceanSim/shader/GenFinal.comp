#version 440 core
const int LOCAL_WORK_GROUP_SIZE = 32;

const int L = 1000;
//const int N = 256;
const float G = 9.8;
const float PI = 3.14159265358979323;
uniform int N;
layout(binding = 0 ,rg32f) uniform image2D imageDx;
layout(binding = 1 ,rg32f) uniform image2D imageDy;
layout(binding = 2 ,rg32f) uniform image2D imageDz;
layout(binding = 3 ,rg32f) uniform image2D imageNx;
layout(binding = 4 ,rg32f) uniform image2D imageNz;
layout(binding = 5 ,rgba32f) uniform image2D imagePos;
layout(binding = 6 ,rgba32f) uniform image2D imageNormal;

layout(local_size_x = LOCAL_WORK_GROUP_SIZE, local_size_y = LOCAL_WORK_GROUP_SIZE, local_size_z = 1) in;

void main(){
	ivec2 storePos = ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y));
	
	// get the data
	vec2 dX = imageLoad(imageDx, storePos).xy;
	vec2 dY = imageLoad(imageDy, storePos).xy;
	vec2 dZ = imageLoad(imageDz, storePos).xy;
	vec2 nX = imageLoad(imageNx, storePos).xy;
	vec2 nZ = imageLoad(imageNz, storePos).xy;
	float sign = 1;
	// (-1)^(x+z) as the sign
	if ( (storePos.x + storePos.y) % 2==1) sign = -1;
	
	vec3 normal = normalize(vec3(sign*nX.x, -1, sign*nZ.x));
	
	vec3 pos = vec3((storePos.x -N / 2)*L/N-sign * dX.x,sign * dY.x,(storePos.y-N/2)*L/N-sign * dZ.x);
	
	imageStore(imagePos,storePos,vec4(pos,0.0));
	imageStore(imageNormal,storePos,vec4(normal,0.0));
	

}